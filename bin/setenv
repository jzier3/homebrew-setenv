#!/usr/bin/env bash
set -euo pipefail

STORE_DIR="${SETENV_STORE_DIR:-$HOME/.setenv}"
STORE_FILE="$STORE_DIR/vars.sh"
ENV_FILE="$STORE_DIR/env.sh"

usage() {
  cat <<EOF
Usage:
  setenv view
  setenv search <pattern>
  setenv delete <VAR>
  setenv update <VAR>=<VALUE>
  setenv <VAR>=<VALUE>         # shorthand for update
EOF
}

ensure_store() {
  mkdir -p "$STORE_DIR"
  if [[ ! -f "$STORE_FILE" ]]; then
    cat >"$STORE_FILE" <<'EOS'
# ~/.setenv/vars.sh
# Managed by setenv CLI
EOS
  fi
  regen_env   # ensure env.sh exists/syncs with vars.sh on first run
}

valid_var() { [[ "$1" =~ ^[A-Za-z_][A-Za-z0-9_]*$ ]]; }

shell_escape() {
  local s="$1"
  s="${s//\\/\\\\}"
  s="${s//\"/\\\"}"
  printf '%s' "$s"
}

regen_env() {
  # Rebuild exports from vars.sh, stripping CR and ignoring comments/blank lines
  if grep -Eq '^[[:space:]]*export[[:space:]]+[A-Za-z_][A-Za-z0-9_]*=' "$STORE_FILE"; then
    awk '
      /^[[:space:]]*export[[:space:]]+[A-Za-z_][A-Za-z0-9_]*=/ {
        sub(/\r$/,""); print
      }
    ' "$STORE_FILE" >"$ENV_FILE.tmp"
  else
    : >"$ENV_FILE.tmp"
  fi
  mv "$ENV_FILE.tmp" "$ENV_FILE"
  touch "$ENV_FILE"   # trigger zsh precmd hook in other sessions
}


set_kv() {
  local pair="$1"
  if [[ "$pair" != *"="* ]]; then
    echo "Error: expected VAR=VALUE" >&2; exit 2
  fi
  local var="${pair%%=*}"
  local val="${pair#*=}"
  valid_var "$var" || { echo "Invalid var name $var" >&2; exit 2; }

  # Remove existing lines for this var
  awk -v V="$var" '
    $0 !~ "^[[:space:]]*export[[:space:]]*"V"="
  ' "$STORE_FILE" >"$STORE_FILE.tmp" || true

  local esc; esc=$(shell_escape "$val")
  printf 'export %s="%s"\n' "$var" "$esc" >>"$STORE_FILE.tmp"

  mv "$STORE_FILE.tmp" "$STORE_FILE"
  regen_env
  echo "Updated: $var"
}

delete_var() {
  local var="$1"
  valid_var "$var" || { echo "Invalid var name $var" >&2; exit 2; }
  awk -v V="$var" '
    $0 !~ "^[[:space:]]*export[[:space:]]*"V"="
  ' "$STORE_FILE" >"$STORE_FILE.tmp" || true
  mv "$STORE_FILE.tmp" "$STORE_FILE"
  regen_env
  echo "Deleted: $var (if existed)"
}

view_all() { grep '^export' "$STORE_FILE" | sed 's/^export //'; }
search_vars() { grep -i '^export' "$STORE_FILE" | grep -i "$1" | sed 's/^export //'; }


init_zsh() {
  local rcfile="$HOME/.zshrc"
  local marker="command setenv"
  mkdir -p "$(dirname "$rcfile")"
  touch "$rcfile"

  if grep -q "$marker" "$rcfile"; then
    echo "setenv already initialized in $rcfile"
  else
    cat >> "$rcfile" <<'EOF'

# --- setenv init ---
setenv() {
  command setenv "$@"   # call the real Homebrew binary
  [ -f "$HOME/.setenv/env.sh" ] && . "$HOME/.setenv/env.sh"
}
# --- end setenv init ---
EOF
    echo "âœ… Added setenv function to $rcfile"
    echo "Run 'source $rcfile' or restart your shell to activate."
  fi
}

main() {
  ensure_store
  [[ $# -eq 0 ]] && { exit 1; }

  case "$1" in
    help) usage ;;
    view) view_all ;;
    search) shift; [[ $# -ge 1 ]] || { usage; exit 1; }; search_vars "$1" ;;
    delete) shift; [[ $# -ge 1 ]] || { usage; exit 1; }; delete_var "$1" ;;
    update) shift; [[ $# -ge 1 ]] || { usage; exit 1; }; set_kv "$1" ;;
    *) [[ "$1" == *"="* ]] && set_kv "$1" || { usage; exit 1; } ;;
  esac
}
main "$@"
